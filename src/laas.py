# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _laas
else:
    import _laas

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _laas.delete_SwigPyIterator

    def value(self):
        return _laas.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _laas.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _laas.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _laas.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _laas.SwigPyIterator_equal(self, x)

    def copy(self):
        return _laas.SwigPyIterator_copy(self)

    def next(self):
        return _laas.SwigPyIterator_next(self)

    def __next__(self):
        return _laas.SwigPyIterator___next__(self)

    def previous(self):
        return _laas.SwigPyIterator_previous(self)

    def advance(self, n):
        return _laas.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _laas.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _laas.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _laas.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _laas.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _laas.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _laas.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _laas:
_laas.SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _laas.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _laas.VecInt___nonzero__(self)

    def __bool__(self):
        return _laas.VecInt___bool__(self)

    def __len__(self):
        return _laas.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _laas.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _laas.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _laas.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _laas.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _laas.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _laas.VecInt___setitem__(self, *args)

    def pop(self):
        return _laas.VecInt_pop(self)

    def append(self, x):
        return _laas.VecInt_append(self, x)

    def empty(self):
        return _laas.VecInt_empty(self)

    def size(self):
        return _laas.VecInt_size(self)

    def swap(self, v):
        return _laas.VecInt_swap(self, v)

    def begin(self):
        return _laas.VecInt_begin(self)

    def end(self):
        return _laas.VecInt_end(self)

    def rbegin(self):
        return _laas.VecInt_rbegin(self)

    def rend(self):
        return _laas.VecInt_rend(self)

    def clear(self):
        return _laas.VecInt_clear(self)

    def get_allocator(self):
        return _laas.VecInt_get_allocator(self)

    def pop_back(self):
        return _laas.VecInt_pop_back(self)

    def erase(self, *args):
        return _laas.VecInt_erase(self, *args)

    def __init__(self, *args):
        _laas.VecInt_swiginit(self, _laas.new_VecInt(*args))

    def push_back(self, x):
        return _laas.VecInt_push_back(self, x)

    def front(self):
        return _laas.VecInt_front(self)

    def back(self):
        return _laas.VecInt_back(self)

    def assign(self, n, x):
        return _laas.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _laas.VecInt_resize(self, *args)

    def insert(self, *args):
        return _laas.VecInt_insert(self, *args)

    def reserve(self, n):
        return _laas.VecInt_reserve(self, n)

    def capacity(self):
        return _laas.VecInt_capacity(self)
    __swig_destroy__ = _laas.delete_VecInt

# Register VecInt in _laas:
_laas.VecInt_swigregister(VecInt)

class PairInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _laas.PairInt_swiginit(self, _laas.new_PairInt(*args))
    first = property(_laas.PairInt_first_get, _laas.PairInt_first_set)
    second = property(_laas.PairInt_second_get, _laas.PairInt_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _laas.delete_PairInt

# Register PairInt in _laas:
_laas.PairInt_swigregister(PairInt)

class VecPairInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _laas.VecPairInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _laas.VecPairInt___nonzero__(self)

    def __bool__(self):
        return _laas.VecPairInt___bool__(self)

    def __len__(self):
        return _laas.VecPairInt___len__(self)

    def __getslice__(self, i, j):
        return _laas.VecPairInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _laas.VecPairInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _laas.VecPairInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _laas.VecPairInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _laas.VecPairInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _laas.VecPairInt___setitem__(self, *args)

    def pop(self):
        return _laas.VecPairInt_pop(self)

    def append(self, x):
        return _laas.VecPairInt_append(self, x)

    def empty(self):
        return _laas.VecPairInt_empty(self)

    def size(self):
        return _laas.VecPairInt_size(self)

    def swap(self, v):
        return _laas.VecPairInt_swap(self, v)

    def begin(self):
        return _laas.VecPairInt_begin(self)

    def end(self):
        return _laas.VecPairInt_end(self)

    def rbegin(self):
        return _laas.VecPairInt_rbegin(self)

    def rend(self):
        return _laas.VecPairInt_rend(self)

    def clear(self):
        return _laas.VecPairInt_clear(self)

    def get_allocator(self):
        return _laas.VecPairInt_get_allocator(self)

    def pop_back(self):
        return _laas.VecPairInt_pop_back(self)

    def erase(self, *args):
        return _laas.VecPairInt_erase(self, *args)

    def __init__(self, *args):
        _laas.VecPairInt_swiginit(self, _laas.new_VecPairInt(*args))

    def push_back(self, x):
        return _laas.VecPairInt_push_back(self, x)

    def front(self):
        return _laas.VecPairInt_front(self)

    def back(self):
        return _laas.VecPairInt_back(self)

    def assign(self, n, x):
        return _laas.VecPairInt_assign(self, n, x)

    def resize(self, *args):
        return _laas.VecPairInt_resize(self, *args)

    def insert(self, *args):
        return _laas.VecPairInt_insert(self, *args)

    def reserve(self, n):
        return _laas.VecPairInt_reserve(self, n)

    def capacity(self):
        return _laas.VecPairInt_capacity(self)
    __swig_destroy__ = _laas.delete_VecPairInt

# Register VecPairInt in _laas:
_laas.VecPairInt_swigregister(VecPairInt)

class SetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _laas.SetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _laas.SetInt___nonzero__(self)

    def __bool__(self):
        return _laas.SetInt___bool__(self)

    def __len__(self):
        return _laas.SetInt___len__(self)

    def append(self, x):
        return _laas.SetInt_append(self, x)

    def __contains__(self, x):
        return _laas.SetInt___contains__(self, x)

    def __getitem__(self, i):
        return _laas.SetInt___getitem__(self, i)

    def add(self, x):
        return _laas.SetInt_add(self, x)

    def discard(self, x):
        return _laas.SetInt_discard(self, x)

    def __init__(self, *args):
        _laas.SetInt_swiginit(self, _laas.new_SetInt(*args))

    def empty(self):
        return _laas.SetInt_empty(self)

    def size(self):
        return _laas.SetInt_size(self)

    def clear(self):
        return _laas.SetInt_clear(self)

    def swap(self, v):
        return _laas.SetInt_swap(self, v)

    def count(self, x):
        return _laas.SetInt_count(self, x)

    def begin(self):
        return _laas.SetInt_begin(self)

    def end(self):
        return _laas.SetInt_end(self)

    def rbegin(self):
        return _laas.SetInt_rbegin(self)

    def rend(self):
        return _laas.SetInt_rend(self)

    def erase(self, *args):
        return _laas.SetInt_erase(self, *args)

    def find(self, x):
        return _laas.SetInt_find(self, x)

    def lower_bound(self, x):
        return _laas.SetInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _laas.SetInt_upper_bound(self, x)

    def equal_range(self, x):
        return _laas.SetInt_equal_range(self, x)

    def insert(self, __x):
        return _laas.SetInt_insert(self, __x)
    __swig_destroy__ = _laas.delete_SetInt

# Register SetInt in _laas:
_laas.SetInt_swigregister(SetInt)

class LaaS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, M, W, logFileName):
        _laas.LaaS_swiginit(self, _laas.new_LaaS(M, W, logFileName))

    def good(self):
        return _laas.LaaS_good(self)

    def getLastErrorMsg(self):
        return _laas.LaaS_getLastErrorMsg(self)

    def setVerbose(self, v):
        return _laas.LaaS_setVerbose(self, v)

    def replayLogFile(self):
        return _laas.LaaS_replayLogFile(self)

    def getUnAllocated(self, hosts, l1UpPorts, l2UpPorts):
        return _laas.LaaS_getUnAllocated(self, hosts, l1UpPorts, l2UpPorts)

    def getTenants(self, tenantIds):
        return _laas.LaaS_getTenants(self, tenantIds)

    def getTenantAlloc(self, tenantId, hosts, l1UpPorts, l2UpPorts):
        return _laas.LaaS_getTenantAlloc(self, tenantId, hosts, l1UpPorts, l2UpPorts)

    def allocTenant(self, tenantId, GroupHosts, isolation):
        return _laas.LaaS_allocTenant(self, tenantId, GroupHosts, isolation)

    def assignTenant(self, tenantId, hosts, l1UpPorts, l2UpPorts):
        return _laas.LaaS_assignTenant(self, tenantId, hosts, l1UpPorts, l2UpPorts)

    def deallocTenant(self, tenantId):
        return _laas.LaaS_deallocTenant(self, tenantId)

    def setLeafGroup(self, group, leafIdxs):
        return _laas.LaaS_setLeafGroup(self, group, leafIdxs)

    def setLeafCost(self, group, leafIdxs):
        return _laas.LaaS_setLeafCost(self, group, leafIdxs)
    __swig_destroy__ = _laas.delete_LaaS

# Register LaaS in _laas:
_laas.LaaS_swigregister(LaaS)



