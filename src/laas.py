# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_laas', [dirname(__file__)])
        except ImportError:
            import _laas
            return _laas
        if fp is not None:
            try:
                _mod = imp.load_module('_laas', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _laas = swig_import_helper()
    del swig_import_helper
else:
    import _laas
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _laas.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _laas.SwigPyIterator_value(self)
    def incr(self, n=1): return _laas.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _laas.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _laas.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _laas.SwigPyIterator_equal(self, *args)
    def copy(self): return _laas.SwigPyIterator_copy(self)
    def next(self): return _laas.SwigPyIterator_next(self)
    def __next__(self): return _laas.SwigPyIterator___next__(self)
    def previous(self): return _laas.SwigPyIterator_previous(self)
    def advance(self, *args): return _laas.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _laas.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _laas.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _laas.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _laas.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _laas.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _laas.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _laas.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _laas.VecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _laas.VecInt___nonzero__(self)
    def __bool__(self): return _laas.VecInt___bool__(self)
    def __len__(self): return _laas.VecInt___len__(self)
    def pop(self): return _laas.VecInt_pop(self)
    def __getslice__(self, *args): return _laas.VecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _laas.VecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _laas.VecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _laas.VecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _laas.VecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _laas.VecInt___setitem__(self, *args)
    def append(self, *args): return _laas.VecInt_append(self, *args)
    def empty(self): return _laas.VecInt_empty(self)
    def size(self): return _laas.VecInt_size(self)
    def clear(self): return _laas.VecInt_clear(self)
    def swap(self, *args): return _laas.VecInt_swap(self, *args)
    def get_allocator(self): return _laas.VecInt_get_allocator(self)
    def begin(self): return _laas.VecInt_begin(self)
    def end(self): return _laas.VecInt_end(self)
    def rbegin(self): return _laas.VecInt_rbegin(self)
    def rend(self): return _laas.VecInt_rend(self)
    def pop_back(self): return _laas.VecInt_pop_back(self)
    def erase(self, *args): return _laas.VecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _laas.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _laas.VecInt_push_back(self, *args)
    def front(self): return _laas.VecInt_front(self)
    def back(self): return _laas.VecInt_back(self)
    def assign(self, *args): return _laas.VecInt_assign(self, *args)
    def resize(self, *args): return _laas.VecInt_resize(self, *args)
    def insert(self, *args): return _laas.VecInt_insert(self, *args)
    def reserve(self, *args): return _laas.VecInt_reserve(self, *args)
    def capacity(self): return _laas.VecInt_capacity(self)
    __swig_destroy__ = _laas.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _laas.VecInt_swigregister
VecInt_swigregister(VecInt)

class PairInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _laas.new_PairInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _laas.PairInt_first_set
    __swig_getmethods__["first"] = _laas.PairInt_first_get
    if _newclass:first = _swig_property(_laas.PairInt_first_get, _laas.PairInt_first_set)
    __swig_setmethods__["second"] = _laas.PairInt_second_set
    __swig_getmethods__["second"] = _laas.PairInt_second_get
    if _newclass:second = _swig_property(_laas.PairInt_second_get, _laas.PairInt_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _laas.delete_PairInt
    __del__ = lambda self : None;
PairInt_swigregister = _laas.PairInt_swigregister
PairInt_swigregister(PairInt)

class VecPairInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecPairInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecPairInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _laas.VecPairInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _laas.VecPairInt___nonzero__(self)
    def __bool__(self): return _laas.VecPairInt___bool__(self)
    def __len__(self): return _laas.VecPairInt___len__(self)
    def pop(self): return _laas.VecPairInt_pop(self)
    def __getslice__(self, *args): return _laas.VecPairInt___getslice__(self, *args)
    def __setslice__(self, *args): return _laas.VecPairInt___setslice__(self, *args)
    def __delslice__(self, *args): return _laas.VecPairInt___delslice__(self, *args)
    def __delitem__(self, *args): return _laas.VecPairInt___delitem__(self, *args)
    def __getitem__(self, *args): return _laas.VecPairInt___getitem__(self, *args)
    def __setitem__(self, *args): return _laas.VecPairInt___setitem__(self, *args)
    def append(self, *args): return _laas.VecPairInt_append(self, *args)
    def empty(self): return _laas.VecPairInt_empty(self)
    def size(self): return _laas.VecPairInt_size(self)
    def clear(self): return _laas.VecPairInt_clear(self)
    def swap(self, *args): return _laas.VecPairInt_swap(self, *args)
    def get_allocator(self): return _laas.VecPairInt_get_allocator(self)
    def begin(self): return _laas.VecPairInt_begin(self)
    def end(self): return _laas.VecPairInt_end(self)
    def rbegin(self): return _laas.VecPairInt_rbegin(self)
    def rend(self): return _laas.VecPairInt_rend(self)
    def pop_back(self): return _laas.VecPairInt_pop_back(self)
    def erase(self, *args): return _laas.VecPairInt_erase(self, *args)
    def __init__(self, *args): 
        this = _laas.new_VecPairInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _laas.VecPairInt_push_back(self, *args)
    def front(self): return _laas.VecPairInt_front(self)
    def back(self): return _laas.VecPairInt_back(self)
    def assign(self, *args): return _laas.VecPairInt_assign(self, *args)
    def resize(self, *args): return _laas.VecPairInt_resize(self, *args)
    def insert(self, *args): return _laas.VecPairInt_insert(self, *args)
    def reserve(self, *args): return _laas.VecPairInt_reserve(self, *args)
    def capacity(self): return _laas.VecPairInt_capacity(self)
    __swig_destroy__ = _laas.delete_VecPairInt
    __del__ = lambda self : None;
VecPairInt_swigregister = _laas.VecPairInt_swigregister
VecPairInt_swigregister(VecPairInt)

class SetInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _laas.SetInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _laas.SetInt___nonzero__(self)
    def __bool__(self): return _laas.SetInt___bool__(self)
    def __len__(self): return _laas.SetInt___len__(self)
    def append(self, *args): return _laas.SetInt_append(self, *args)
    def __contains__(self, *args): return _laas.SetInt___contains__(self, *args)
    def __getitem__(self, *args): return _laas.SetInt___getitem__(self, *args)
    def add(self, *args): return _laas.SetInt_add(self, *args)
    def discard(self, *args): return _laas.SetInt_discard(self, *args)
    def __init__(self, *args): 
        this = _laas.new_SetInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _laas.SetInt_empty(self)
    def size(self): return _laas.SetInt_size(self)
    def clear(self): return _laas.SetInt_clear(self)
    def swap(self, *args): return _laas.SetInt_swap(self, *args)
    def count(self, *args): return _laas.SetInt_count(self, *args)
    def begin(self): return _laas.SetInt_begin(self)
    def end(self): return _laas.SetInt_end(self)
    def rbegin(self): return _laas.SetInt_rbegin(self)
    def rend(self): return _laas.SetInt_rend(self)
    def erase(self, *args): return _laas.SetInt_erase(self, *args)
    def find(self, *args): return _laas.SetInt_find(self, *args)
    def lower_bound(self, *args): return _laas.SetInt_lower_bound(self, *args)
    def upper_bound(self, *args): return _laas.SetInt_upper_bound(self, *args)
    def equal_range(self, *args): return _laas.SetInt_equal_range(self, *args)
    def insert(self, *args): return _laas.SetInt_insert(self, *args)
    __swig_destroy__ = _laas.delete_SetInt
    __del__ = lambda self : None;
SetInt_swigregister = _laas.SetInt_swigregister
SetInt_swigregister(SetInt)

class LaaS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LaaS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LaaS, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _laas.new_LaaS(*args)
        try: self.this.append(this)
        except: self.this = this
    def good(self): return _laas.LaaS_good(self)
    def getLastErrorMsg(self): return _laas.LaaS_getLastErrorMsg(self)
    def setVerbose(self, *args): return _laas.LaaS_setVerbose(self, *args)
    def replayLogFile(self): return _laas.LaaS_replayLogFile(self)
    def getUnAllocated(self, *args): return _laas.LaaS_getUnAllocated(self, *args)
    def getTenants(self, *args): return _laas.LaaS_getTenants(self, *args)
    def getTenantAlloc(self, *args): return _laas.LaaS_getTenantAlloc(self, *args)
    def allocTenant(self, *args): return _laas.LaaS_allocTenant(self, *args)
    def assignTenant(self, *args): return _laas.LaaS_assignTenant(self, *args)
    def deallocTenant(self, *args): return _laas.LaaS_deallocTenant(self, *args)
    def setLeafGroup(self, *args): return _laas.LaaS_setLeafGroup(self, *args)
    def setLeafCost(self, *args): return _laas.LaaS_setLeafCost(self, *args)
    __swig_destroy__ = _laas.delete_LaaS
    __del__ = lambda self : None;
LaaS_swigregister = _laas.LaaS_swigregister
LaaS_swigregister(LaaS)

# This file is compatible with both classic and new-style classes.


